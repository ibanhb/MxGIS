<?xml version="1.0" encoding="UTF-8" ?>
<config>

  <luceneMatchVersion>LUCENE_42</luceneMatchVersion>

  <lib dir="../../dih/" regex=".*\.jar" />

  <query>
    <!-- Maximum number of clauses in a boolean query... can affect
        range or prefix queries that expand to big boolean
        queries.  An exception is thrown if exceeded.  -->
    <maxBooleanClauses>1024</maxBooleanClauses>

    
    <!-- Cache used by SolrIndexSearcher for filters (DocSets),
         unordered sets of *all* documents that match a query.
         When a new searcher is opened, its caches may be prepopulated
         or "autowarmed" using data from caches in the old searcher.
         autowarmCount is the number of items to prepopulate.  For LRUCache,
         the autowarmed items will be the most recently accessed items.
       Parameters:
         class - the SolrCache implementation (currently only LRUCache)
         size - the maximum number of entries in the cache
         initialSize - the initial capacity (number of entries) of
           the cache.  (seel java.util.HashMap)
         autowarmCount - the number of entries to prepopulate from
           and old cache.
         -->
    <filterCache
      class="solr.LRUCache"
      size="512"
      initialSize="512"
      autowarmCount="256"/>

   <!-- queryResultCache caches results of searches - ordered lists of
         document ids (DocList) based on a query, a sort, and the range
         of documents requested.  -->
    <queryResultCache
      class="solr.LRUCache"
      size="512"
      initialSize="512"
      autowarmCount="256"/>

  <!-- documentCache caches Lucene Document objects (the stored fields for each document).
       Since Lucene internal document ids are transient, this cache will not be autowarmed.  -->
    <documentCache
      class="solr.LRUCache"
      size="512"
      initialSize="512"
      autowarmCount="0"/>

    <!-- If true, stored fields that are not requested will be loaded lazily.

    This can result in a significant speed improvement if the usual case is to
    not load all stored fields, especially if the skipped fields are large compressed
    text fields.
    -->
    <enableLazyFieldLoading>true</enableLazyFieldLoading>

    <!-- Example of a generic cache.  These caches may be accessed by name
         through SolrIndexSearcher.getCache(),cacheLookup(), and cacheInsert().
         The purpose is to enable easy caching of user/application level data.
         The regenerator argument should be specified as an implementation
         of solr.search.CacheRegenerator if autowarming is desired.  -->
    <!--
    <cache name="myUserCache"
      class="solr.LRUCache"
      size="4096"
      initialSize="1024"
      autowarmCount="1024"
      regenerator="org.mycompany.mypackage.MyRegenerator"
      />
    -->

   <!-- An optimization that attempts to use a filter to satisfy a search.
         If the requested sort does not include score, then the filterCache
         will be checked for a filter matching the query. If found, the filter
         will be used as the source of document ids, and then the sort will be
         applied to that.
    <useFilterForSortedQuery>true</useFilterForSortedQuery>
   -->

   <!-- An optimization for use with the queryResultCache.  When a search
         is requested, a superset of the requested number of document ids
         are collected.  For example, if a search for a particular query
         requests matching documents 10 through 19, and queryWindowSize is 50,
         then documents 0 through 49 will be collected and cached.  Any further
         requests in that range can be satisfied via the cache.  -->
    <queryResultWindowSize>50</queryResultWindowSize>
    
    <!-- Maximum number of documents to cache for any entry in the
         queryResultCache. -->
    <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

    <!-- This entry enables an int hash representation for filters (DocSets)
         when the number of items in the set is less than maxSize.  For smaller
         sets, this representation is more memory efficient, more efficient to
         iterate over, and faster to take intersections.  -->
    <HashDocSet maxSize="3000" loadFactor="0.75"/>

    <!-- a newSearcher event is fired whenever a new searcher is being prepared
         and there is a current searcher handling requests (aka registered). -->
    <!-- QuerySenderListener takes an array of NamedList and executes a
         local query request for each NamedList in sequence. -->
    <listener event="newSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
        <lst> <str name="q">solr</str> <str name="start">0</str> <str name="rows">10</str> </lst>
        <lst> <str name="q">rocks</str> <str name="start">0</str> <str name="rows">10</str> </lst>
        <lst><str name="q">static newSearcher warming query from solrconfig.xml</str></lst>
      </arr>
    </listener>

    <!-- a firstSearcher event is fired whenever a new searcher is being
         prepared but there is no current registered searcher to handle
         requests or to gain autowarming data from. -->
    <listener event="firstSearcher" class="solr.QuerySenderListener">
      <arr name="queries">
      </arr>
    </listener>

    <!-- If a search request comes in and there is no current registered searcher,
         then immediately register the still warming searcher and use it.  If
         "false" then all requests will block until the first searcher is done
         warming. -->
    <useColdSearcher>false</useColdSearcher>

    <!-- Maximum number of searchers that may be warming in the background
      concurrently.  An error is returned if this limit is exceeded. Recommend
      1-2 for read-only slaves, higher for masters w/o cache warming. -->
    <maxWarmingSearchers>4</maxWarmingSearchers>

  </query>

  <requestDispatcher handleSelect="true" >
    <!--Make sure your system has some authentication before enabling remote streaming!  -->
    <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" formdataUploadLimitInKB="2048" />
        
    <!-- Set HTTP caching related parameters (for proxy caches and clients).
          
         To get the behaviour of Solr 1.2 (ie: no caching related headers)
         use the never304="true" option and do not specify a value for
         <cacheControl>
    -->
    <httpCaching never304="true">
    <!--httpCaching lastModifiedFrom="openTime"
                 etagSeed="Solr"-->
       <!-- lastModFrom="openTime" is the default, the Last-Modified value
            (and validation against If-Modified-Since requests) will all be
            relative to when the current Searcher was opened.
            You can change it to lastModFrom="dirLastMod" if you want the
            value to exactly corrispond to when the physical index was last
            modified.
               
            etagSeed="..." is an option you can change to force the ETag
            header (and validation against If-None-Match requests) to be
            differnet even if the index has not changed (ie: when making
            significant changes to your config file)

            lastModifiedFrom and etagSeed are both ignored if you use the
            never304="true" option.
       -->
       <!-- If you include a <cacheControl> directive, it will be used to
            generate a Cache-Control header, as well as an Expires header
            if the value contains "max-age="
               
            By default, no Cache-Control header is generated.

            You can use the <cacheControl> option even if you have set
            never304="true"
       -->
       <!-- <cacheControl>max-age=30, public</cacheControl> -->
    </httpCaching>
  </requestDispatcher>

  

  <!--<requestHandler name="/busqueda" class="solr.SearchHandler">
     <lst name="defaults">
       <str name="echoParams">explicit</str>
       <int name="rows">20</int>
       <str name="q.alt">*:*</str>
       <str name="df">text</str>
     </lst>    
  </requestHandler>-->
  	<requestHandler name="/replication" class="solr.ReplicationHandler" >
		<lst name="master">
			<!--Replicate on 'startup' and 'commit'. 'optimize' is also a valid value for replicateAfter. -->
			<str name="replicateAfter">startup</str>
			<str name="replicateAfter">commit</str>

			<!--Create a backup after 'optimize'. Other values can be 'commit', 'startup'. It is possible to have multiple entries of this config string.  Note that this is just for backup, replication does not require this. -->
			<!-- <str name="backupAfter">optimize</str> -->

			<!--If configuration files need to be replicated give the names here, separated by comma -->
			<str name="confFiles">schema.xml,db-data-config.xml,solrconfig.xml,synonyms.txt,synonyms_combinations.txt</str>
			<!--The default value of reservation is 10 secs.See the documentation below . Normally , you should not need to specify this -->
			<str name="commitReserveDuration">00:00:10</str>
		</lst>
		<!-- keep only 1 backup.  Using this parameter precludes using the "numberToKeep" request parameter. (Solr3.6 / Solr4.0)-->
		<!-- (For this to work in conjunction with "backupAfter" with Solr 3.6.0, see bug fix https://issues.apache.org/jira/browse/SOLR-3361 )-->
		<str name="maxNumberOfBackups">1</str> 
	</requestHandler>

  <requestHandler name="/select" class="solr.SearchHandler" default="false">
     <lst name="defaults">        
        <str name="q.op">AND</str>
		<str name="qf">ent^13 objetor^12 munprincipal^11 mun^10 aeropuerto^9 capital^8 urbprincipal^7 urbana^6 rurmza^6 rur^5 calle^4 rasgos^3 numext^2 otros^1</str>				
		<str name="defType">edismax</str> 
		<str name="spellcheck">true</str>
        <!--<str name="df">description_autocomplete</str>-->
     </lst>
  </requestHandler>
  
    <requestHandler name="/shard" class="solr.SearchHandler" default="false">
     <lst name="defaults">        
		<!--<str name="shards">${server.ip}:${server.port}/${solr.app.context}/busq-entidades,${server.ip}:${server.port}/${solr.app.context}/busq-munprincipal,${server.ip}:${server.port}/${solr.app.context}/busq-municipal,${server.ip}:${server.port}/${solr.app.context}/busq-objetor,${server.ip}:${server.port}/${solr.app.context}/busq-capitales,${server.ip}:${server.port}/${solr.app.context}/busq-localidadesimp,${server.ip}:${server.port}/${solr.app.context}/busq-localidadesurb</str>
			<str name="shards">${server.ip}:${server.port}/${solr.app.context}/busq-entidades,${server.ip}:${server.port}/${solr.app.context}/busq-munprincipal</str>
			<str name="qf">ent^200 objetor^100 munprincipal^50 capital^20 mun^3 aeropuerto^9 urbprincipal^5 urbana^1 rurmza^6 rur^7 calle^4 rasgos^3 numext^2 otros^0</str>
		-->
		<str name="shards">${server.ip}:${server.port}/${solr.app.context}/busq-entidades,${server.ip}:${server.port}/${solr.app.context}/busq-munprincipal,${server.ip}:${server.port}/${solr.app.context}/busq-municipal,${server.ip}:${server.port}/${solr.app.context}/busq-objetor,${server.ip}:${server.port}/${solr.app.context}/busq-capitales,${server.ip}:${server.port}/${solr.app.context}/busq-localidadesimp,${server.ip}:${server.port}/${solr.app.context}/busq-localidadesurb,${server.ip}:${server.port}/${solr.app.context}/busq-localidadesrur,${server.ip}:${server.port}/${solr.app.context}/busq-localidadesruramz,${server.ip}:${server.port}/${solr.app.context}/busq-vialidades,${server.ip}:${server.port}/${solr.app.context}/busq-hidrograficos,${server.ip}:${server.port}/${solr.app.context}/busq-orograficos,${server.ip}:${server.port}/${solr.app.context}/busq-denueservicios6</str>
        <str name="q.op">AND</str>        
		<!--<str name="qf">edo^4.0 mun^3.0 loc^2.0 nombre^5 numext^1</str>-->
		
		<!--<str name="qf">ent^200 objetor^100 munprincipal^5 capital^50 mun^3 aeropuerto^9 urbprincipal^20 urbana^2 rurmza^1 rur^0</str>-->
		<!--<str name="qf">ent^200 objetor^100 munprincipal^10 capital^50 mun^7 aeropuerto^20 urbprincipal^30 urbana^5 rurmza^3 rur^2 calle^1 rasgos^0</str>-->
		<str name="qf">ent^200 objetor^100 munprincipal^20 capital^60 mun^10 aeropuerto^30 urbprincipal^45 urbana^7 rurmza^5 rur^3 calle^2 rasgos^1 numext^0</str>
		 <!--<str name="sort">cvegeo asc</str>-->
		 
		<str name="defType">edismax</str>
        <!--<str name="df">description_autocomplete</str>-->
     </lst>
  </requestHandler>
  
  <!-- SpellCheckerRequestHandler takes in a word (or several words) as the
       value of the "q" parameter and returns a list of alternative spelling
       suggestions.  If invoked with a ...&cmd=rebuild, it will rebuild the
       spellchecker index.
  -->


  <requestHandler name="spellchecker" class="solr.SpellCheckerRequestHandler" startup="lazy">
    <!-- default values for query parameters -->
     <lst name="defaults">
       <int name="suggestionCount">1</int>
       <float name="accuracy">0.5</float>
     </lst>
     
     <!-- Main init params for handler -->
     
     <!-- The directory where your SpellChecker Index should live.   -->
     <!-- May be absolute, or relative to the Solr "dataDir" directory. -->
     <!-- If this option is not specified, a RAM directory will be used -->
     <str name="spellcheckerIndexDir">spell</str>
     
     <!-- the field in your schema that you want to be able to build -->
     <!-- your spell index on. This should be a field that uses a very -->
     <!-- simple FieldType without a lot of Analysis (ie: string) -->
     <str name="termSourceField">word</str>
     
   </requestHandler>

<searchComponent name="spellcheck" class="solr.SpellCheckComponent">
  <lst name="spellchecker">
    <str name="name">default</str>
    <str name="field">nombre</str>
    <str name="classname">solr.DirectSolrSpellChecker</str>
    <str name="distanceMeasure">internal</str>
    <float name="accuracy">0.5</float>
    <int name="maxEdits">2</int>
    <int name="minPrefix">1</int>
    <int name="maxInspections">5</int>
    <int name="minQueryLength">4</int>
    <float name="maxQueryFrequency">0.01</float>
    <float name="thresholdTokenFrequency">.01</float>
  </lst>
</searchComponent>

<searchComponent class="solr.SpellCheckComponent" name="suggest">
   <lst name="spellchecker">
      <str name="name">suggest</str>
      <str name="classname">org.apache.solr.spelling.suggest.Suggester</str>
      <str name="lookupImpl">org.apache.solr.spelling.suggest.tst.TSTLookup</str>
      <str name="field">nombre</str>  <!-- the indexed field to derive suggestions from -->
      <float name="threshold">0.005</float>
      <str name="buildOnCommit">true</str>
<!--
      <str name="sourceLocation">american-english</str>
-->
   </lst>
</searchComponent>

<requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
	<lst name="defaults">
		<str name="df">nombre</str>
		<str name="spellcheck.dictionary">direct</str>
		<str name="spellcheck">on</str>
		<str name="spellcheck.extendedResults">true</str>
		<str name="spellcheck.count">5</str>
		<str name="spellcheck.collate">true</str>
		<str name="spellcheck.collateExtendedResults">true</str>
	</lst>
	<arr name="last-components">
		<str>suggest</str>
	</arr>
</requestHandler>   
   
   <requestHandler name="/mlt" class="solr.MoreLikeThisHandler">
     <lst name="defaults">
       <str name="mlt.fl">manu,cat</str>
       <int name="mlt.mindf">1</int>
     </lst>
   </requestHandler>

  <requestHandler name="/analysis/field" class="solr.FieldAnalysisRequestHandler" />

  <requestHandler name="/admin/" class="solr.admin.AdminHandlers" />
  
  <requestHandler name="/dataimport" class="org.apache.solr.handler.dataimport.DataImportHandler">
  	<lst name="defaults">
  		<str name="config">db-data-config.xml</str>  		
  	</lst>
  </requestHandler>

  <admin>
    <defaultQuery>*:*</defaultQuery>
  </admin>

</config>